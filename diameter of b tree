/diameter of binary tree

#include<stdio.h>
#include<stdlib.h>

struct node{
  int data;
  struct node *left;
  struct node *right;    
};

struct node* newNode(int val){
    struct node* temp = (struct node*) malloc(sizeof(struct node));
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

int height(struct node* root){
    if(root==NULL){
        return 0;
    }
    int l = height(root->left);
    int r = height(root->right);
    if(l>r){
        return l+1;
    }
    else{
        return r+1;
    }
}
int diametere(struct node* root){
    if(root==NULL){
        return 0;
    }
   int op1 = diametere(root->left);   
   int op2 = diametere(root->right);
   int op3 = height(root->left) + height(root->right) + 1; 
   int res = 0;
   if(op2>op3){
       res = op2;
   }
   else{
       res = op3;
   }
   
  if(op1>res){
      return op1;
  } 
  else{
      return res;
  }
}

int main()
{
 
    /* Constructed binary tree is
              1
            /   \
          2      3
        /  \
      4     5
    */
    struct node* root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
 
    // Function Call
    printf("Diameter of the given binary tree is %d\n",
           diametere(root));
 
    return 0;
}
